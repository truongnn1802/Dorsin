{"version":3,"sources":["logo.svg","components/Button/index.jsx","components/Settings/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["Button","props","console","log","bgColor","href","className","onClick","e","target","root","document","querySelector","mainColor","getComputedStyle","getPropertyValue","name","style","backgroundColor","color","defaultProps","documentElement","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"mpBAAe,I,6BCYf,SAASA,EAAOC,GACdC,QAAQC,IAAI,iBASZ,OACE,+BACqB,IAAlBF,EAAMG,QACL,mBAAGC,KAAK,IACPC,UAAU,MACVC,QAba,SAAUC,GAC5BN,QAAQC,IAAIK,EAAEC,QACd,IAAMC,EAAOC,SAASC,cAAc,SAE9BC,EADaC,iBAAiBJ,GACPK,iBAAiB,mBAClDb,QAAQC,IAAIU,IAMJ,SAGGZ,EAAMe,OAGT,mBACEX,KAAK,IACLC,UAAU,MACVW,MAAO,CAAEC,gBAAiB,OAAQC,MAAO,QAH3C,SAKGlB,EAAMe,SA5BjBhB,EAAOoB,aAAe,CACpBhB,SAAS,EACTY,KAAM,K,8HCNGL,SAASU,gB,kBCWLC,MATf,WACE,OACE,cAAC,WAAD,KCIWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvB,SAASwB,eAAe,SAM1BZ,M","file":"static/js/main.5dbb35ca.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useRef, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./style.css\";\r\n\r\nButton.propTypes = {\r\n  bgColor: PropTypes.bool,\r\n  name: PropTypes.string,\r\n};\r\nButton.defaultProps = {\r\n  bgColor: false,\r\n  name: \" \",\r\n};\r\nfunction Button(props) {\r\n  console.log(\"render button\");\r\n  const handleClick = function (e) {\r\n    console.log(e.target);\r\n    const root = document.querySelector(\":root\");\r\n    const rootStyles = getComputedStyle(root);\r\n    const mainColor = rootStyles.getPropertyValue('--primary-color')\r\nconsole.log(mainColor)\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {props.bgColor === true ? (\r\n        <a href=\"#\"\r\n         className=\"btn\"\r\n         onClick={handleClick}>\r\n          {props.name}\r\n        </a>\r\n      ) : (\r\n        <a\r\n          href=\"#\"\r\n          className=\"btn\"\r\n          style={{ backgroundColor: \"#FFF\", color: \"#000\" }}\r\n        >\r\n          {props.name}\r\n        </a>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import React, { useRef, useState } from \"react\";\r\nimport Color from \"./color\";\r\nimport \"./style.css\";\r\n\r\nlet root = document.documentElement;\r\n\r\nconst listColor = [\r\n  \"#fb3e3e\",\r\n  \"#1bbc9d\",\r\n  \"#f85f89\",\r\n  \"#00e6e6\",\r\n  \"#704fff\",\r\n  \"#2762da\",\r\n  \"#f09105\",\r\n  \"#f6cb42\",\r\n];\r\nfunction Settings() {\r\n  const handleChangeColor = function (color) {\r\n    console.log(color);\r\n    root.style.setProperty('--primary-color',`${color}`);\r\n  };\r\n  const settingElement = useRef();\r\n\r\n  const handleClickCollapse = ()=>{\r\n    console.log(settingElement.current);\r\n    settingElement.current.classList.toggle(\"open\");  \r\n  }\r\n\r\n  return (\r\n    <div id=\"setting\" ref={settingElement}>\r\n      <div className=\"setting-icon\"\r\n       onClick={handleClickCollapse}>\r\n        <span class=\"material-icons\">settings</span>\r\n      </div>\r\n      <div className=\"choose-color\">\r\n        <h4>Select Your Color</h4>\r\n        <div className=\"list-color\">\r\n        <Color\r\n             listColor={listColor}\r\n              onChangeColor={handleChangeColor} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Settings;\r\n","import logo from './logo.svg';\r\nimport './App.scss';\r\nimport HomePage from './pages/Home-one';\r\nimport { Fragment } from 'react';\r\nimport HomeTwo from './pages/Home-two';\r\n\r\nfunction App() {\r\n  return (\r\n    <Fragment>\r\n     {/* <HomePage/> */}\r\n     {/* <HomeTwo/> */}\r\n  </Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}